# Generated from D:/DEV/HCMUT/222-work/PPL-ASGM/1/src/main/mt22/parser\MT22.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,57,453,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,1,0,1,0,1,0,
        1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,
        1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,
        1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,3,19,245,
        8,19,1,19,3,19,248,8,19,1,19,1,19,3,19,252,8,19,1,19,3,19,255,8,
        19,1,19,1,19,1,19,3,19,260,8,19,1,19,1,19,1,20,1,20,5,20,266,8,20,
        10,20,12,20,269,9,20,1,21,1,21,3,21,273,8,21,1,21,1,21,1,22,1,22,
        1,22,3,22,280,8,22,1,22,5,22,283,8,22,10,22,12,22,286,9,22,1,22,
        3,22,289,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,
        300,8,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,
        5,26,313,8,26,10,26,12,26,316,9,26,1,27,1,27,1,28,1,28,1,29,1,29,
        1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,
        1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,40,
        1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,
        1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,
        1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,5,56,385,8,56,10,56,
        12,56,388,9,56,1,57,4,57,391,8,57,11,57,12,57,392,1,57,1,57,1,58,
        1,58,1,58,1,58,5,58,401,8,58,10,58,12,58,404,9,58,1,58,1,58,1,58,
        1,58,1,58,1,59,1,59,1,59,1,59,5,59,415,8,59,10,59,12,59,418,9,59,
        1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,1,61,5,61,429,8,61,10,61,
        12,61,432,9,61,1,61,1,61,1,62,1,62,5,62,438,8,62,10,62,12,62,441,
        9,62,1,62,1,62,5,62,445,8,62,10,62,12,62,448,9,62,1,62,1,62,1,63,
        1,63,3,402,439,446,0,64,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,0,43,0,45,21,47,22,49,23,51,0,53,0,55,24,57,25,59,26,61,27,63,
        28,65,29,67,30,69,31,71,32,73,33,75,34,77,35,79,36,81,37,83,38,85,
        39,87,40,89,41,91,42,93,43,95,44,97,45,99,46,101,47,103,48,105,49,
        107,50,109,0,111,0,113,51,115,52,117,53,119,54,121,55,123,56,125,
        57,127,0,1,0,11,2,0,69,69,101,101,2,0,43,43,45,45,1,0,49,57,8,0,
        34,34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,2,0,34,34,
        92,92,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
        122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,5,0,8,10,12,13,34,34,39,
        39,92,92,467,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
        1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
        1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,
        107,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,
        0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,1,129,1,0,0,0,3,134,
        1,0,0,0,5,140,1,0,0,0,7,148,1,0,0,0,9,151,1,0,0,0,11,157,1,0,0,0,
        13,162,1,0,0,0,15,166,1,0,0,0,17,175,1,0,0,0,19,178,1,0,0,0,21,186,
        1,0,0,0,23,193,1,0,0,0,25,200,1,0,0,0,27,206,1,0,0,0,29,211,1,0,
        0,0,31,215,1,0,0,0,33,224,1,0,0,0,35,227,1,0,0,0,37,235,1,0,0,0,
        39,259,1,0,0,0,41,263,1,0,0,0,43,270,1,0,0,0,45,288,1,0,0,0,47,299,
        1,0,0,0,49,301,1,0,0,0,51,306,1,0,0,0,53,314,1,0,0,0,55,317,1,0,
        0,0,57,319,1,0,0,0,59,321,1,0,0,0,61,323,1,0,0,0,63,325,1,0,0,0,
        65,327,1,0,0,0,67,329,1,0,0,0,69,332,1,0,0,0,71,335,1,0,0,0,73,338,
        1,0,0,0,75,341,1,0,0,0,77,343,1,0,0,0,79,346,1,0,0,0,81,348,1,0,
        0,0,83,351,1,0,0,0,85,354,1,0,0,0,87,356,1,0,0,0,89,358,1,0,0,0,
        91,360,1,0,0,0,93,362,1,0,0,0,95,364,1,0,0,0,97,366,1,0,0,0,99,368,
        1,0,0,0,101,370,1,0,0,0,103,372,1,0,0,0,105,374,1,0,0,0,107,376,
        1,0,0,0,109,378,1,0,0,0,111,380,1,0,0,0,113,382,1,0,0,0,115,390,
        1,0,0,0,117,396,1,0,0,0,119,410,1,0,0,0,121,421,1,0,0,0,123,424,
        1,0,0,0,125,435,1,0,0,0,127,451,1,0,0,0,129,130,5,97,0,0,130,131,
        5,117,0,0,131,132,5,116,0,0,132,133,5,111,0,0,133,2,1,0,0,0,134,
        135,5,98,0,0,135,136,5,114,0,0,136,137,5,101,0,0,137,138,5,97,0,
        0,138,139,5,107,0,0,139,4,1,0,0,0,140,141,5,98,0,0,141,142,5,111,
        0,0,142,143,5,111,0,0,143,144,5,108,0,0,144,145,5,101,0,0,145,146,
        5,97,0,0,146,147,5,110,0,0,147,6,1,0,0,0,148,149,5,100,0,0,149,150,
        5,111,0,0,150,8,1,0,0,0,151,152,5,102,0,0,152,153,5,108,0,0,153,
        154,5,111,0,0,154,155,5,97,0,0,155,156,5,116,0,0,156,10,1,0,0,0,
        157,158,5,101,0,0,158,159,5,108,0,0,159,160,5,115,0,0,160,161,5,
        101,0,0,161,12,1,0,0,0,162,163,5,102,0,0,163,164,5,111,0,0,164,165,
        5,114,0,0,165,14,1,0,0,0,166,167,5,102,0,0,167,168,5,117,0,0,168,
        169,5,110,0,0,169,170,5,99,0,0,170,171,5,116,0,0,171,172,5,105,0,
        0,172,173,5,111,0,0,173,174,5,110,0,0,174,16,1,0,0,0,175,176,5,105,
        0,0,176,177,5,102,0,0,177,18,1,0,0,0,178,179,5,105,0,0,179,180,5,
        110,0,0,180,181,5,116,0,0,181,182,5,101,0,0,182,183,5,103,0,0,183,
        184,5,101,0,0,184,185,5,114,0,0,185,20,1,0,0,0,186,187,5,114,0,0,
        187,188,5,101,0,0,188,189,5,116,0,0,189,190,5,117,0,0,190,191,5,
        114,0,0,191,192,5,110,0,0,192,22,1,0,0,0,193,194,5,115,0,0,194,195,
        5,116,0,0,195,196,5,114,0,0,196,197,5,105,0,0,197,198,5,110,0,0,
        198,199,5,103,0,0,199,24,1,0,0,0,200,201,5,119,0,0,201,202,5,104,
        0,0,202,203,5,105,0,0,203,204,5,108,0,0,204,205,5,101,0,0,205,26,
        1,0,0,0,206,207,5,118,0,0,207,208,5,111,0,0,208,209,5,105,0,0,209,
        210,5,100,0,0,210,28,1,0,0,0,211,212,5,111,0,0,212,213,5,117,0,0,
        213,214,5,116,0,0,214,30,1,0,0,0,215,216,5,99,0,0,216,217,5,111,
        0,0,217,218,5,110,0,0,218,219,5,116,0,0,219,220,5,105,0,0,220,221,
        5,110,0,0,221,222,5,117,0,0,222,223,5,101,0,0,223,32,1,0,0,0,224,
        225,5,111,0,0,225,226,5,102,0,0,226,34,1,0,0,0,227,228,5,105,0,0,
        228,229,5,110,0,0,229,230,5,104,0,0,230,231,5,101,0,0,231,232,5,
        114,0,0,232,233,5,105,0,0,233,234,5,116,0,0,234,36,1,0,0,0,235,236,
        5,97,0,0,236,237,5,114,0,0,237,238,5,114,0,0,238,239,5,97,0,0,239,
        240,5,121,0,0,240,38,1,0,0,0,241,242,3,45,22,0,242,244,3,97,48,0,
        243,245,3,45,22,0,244,243,1,0,0,0,244,245,1,0,0,0,245,247,1,0,0,
        0,246,248,3,43,21,0,247,246,1,0,0,0,247,248,1,0,0,0,248,260,1,0,
        0,0,249,251,3,97,48,0,250,252,3,45,22,0,251,250,1,0,0,0,251,252,
        1,0,0,0,252,254,1,0,0,0,253,255,3,43,21,0,254,253,1,0,0,0,254,255,
        1,0,0,0,255,260,1,0,0,0,256,257,3,45,22,0,257,258,3,43,21,0,258,
        260,1,0,0,0,259,241,1,0,0,0,259,249,1,0,0,0,259,256,1,0,0,0,260,
        261,1,0,0,0,261,262,6,19,0,0,262,40,1,0,0,0,263,267,3,97,48,0,264,
        266,3,109,54,0,265,264,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,
        268,1,0,0,0,268,42,1,0,0,0,269,267,1,0,0,0,270,272,7,0,0,0,271,273,
        7,1,0,0,272,271,1,0,0,0,272,273,1,0,0,0,273,274,1,0,0,0,274,275,
        3,45,22,0,275,44,1,0,0,0,276,289,3,111,55,0,277,284,7,2,0,0,278,
        280,5,95,0,0,279,278,1,0,0,0,279,280,1,0,0,0,280,281,1,0,0,0,281,
        283,3,109,54,0,282,279,1,0,0,0,283,286,1,0,0,0,284,282,1,0,0,0,284,
        285,1,0,0,0,285,287,1,0,0,0,286,284,1,0,0,0,287,289,6,22,1,0,288,
        276,1,0,0,0,288,277,1,0,0,0,289,46,1,0,0,0,290,291,5,116,0,0,291,
        292,5,114,0,0,292,293,5,117,0,0,293,300,5,101,0,0,294,295,5,102,
        0,0,295,296,5,97,0,0,296,297,5,108,0,0,297,298,5,115,0,0,298,300,
        5,101,0,0,299,290,1,0,0,0,299,294,1,0,0,0,300,48,1,0,0,0,301,302,
        3,107,53,0,302,303,3,53,26,0,303,304,3,107,53,0,304,305,6,24,2,0,
        305,50,1,0,0,0,306,307,5,92,0,0,307,308,7,3,0,0,308,52,1,0,0,0,309,
        310,5,92,0,0,310,313,7,3,0,0,311,313,8,4,0,0,312,309,1,0,0,0,312,
        311,1,0,0,0,313,316,1,0,0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,
        54,1,0,0,0,316,314,1,0,0,0,317,318,5,43,0,0,318,56,1,0,0,0,319,320,
        5,45,0,0,320,58,1,0,0,0,321,322,5,42,0,0,322,60,1,0,0,0,323,324,
        5,47,0,0,324,62,1,0,0,0,325,326,5,37,0,0,326,64,1,0,0,0,327,328,
        5,33,0,0,328,66,1,0,0,0,329,330,5,38,0,0,330,331,5,38,0,0,331,68,
        1,0,0,0,332,333,5,124,0,0,333,334,5,124,0,0,334,70,1,0,0,0,335,336,
        5,61,0,0,336,337,5,61,0,0,337,72,1,0,0,0,338,339,5,33,0,0,339,340,
        5,61,0,0,340,74,1,0,0,0,341,342,5,60,0,0,342,76,1,0,0,0,343,344,
        5,60,0,0,344,345,5,61,0,0,345,78,1,0,0,0,346,347,5,62,0,0,347,80,
        1,0,0,0,348,349,5,62,0,0,349,350,5,61,0,0,350,82,1,0,0,0,351,352,
        5,58,0,0,352,353,5,58,0,0,353,84,1,0,0,0,354,355,5,40,0,0,355,86,
        1,0,0,0,356,357,5,41,0,0,357,88,1,0,0,0,358,359,5,91,0,0,359,90,
        1,0,0,0,360,361,5,93,0,0,361,92,1,0,0,0,362,363,5,123,0,0,363,94,
        1,0,0,0,364,365,5,125,0,0,365,96,1,0,0,0,366,367,5,46,0,0,367,98,
        1,0,0,0,368,369,5,44,0,0,369,100,1,0,0,0,370,371,5,59,0,0,371,102,
        1,0,0,0,372,373,5,58,0,0,373,104,1,0,0,0,374,375,5,61,0,0,375,106,
        1,0,0,0,376,377,5,34,0,0,377,108,1,0,0,0,378,379,7,5,0,0,379,110,
        1,0,0,0,380,381,5,48,0,0,381,112,1,0,0,0,382,386,7,6,0,0,383,385,
        7,7,0,0,384,383,1,0,0,0,385,388,1,0,0,0,386,384,1,0,0,0,386,387,
        1,0,0,0,387,114,1,0,0,0,388,386,1,0,0,0,389,391,7,8,0,0,390,389,
        1,0,0,0,391,392,1,0,0,0,392,390,1,0,0,0,392,393,1,0,0,0,393,394,
        1,0,0,0,394,395,6,57,3,0,395,116,1,0,0,0,396,397,5,47,0,0,397,398,
        5,42,0,0,398,402,1,0,0,0,399,401,9,0,0,0,400,399,1,0,0,0,401,404,
        1,0,0,0,402,403,1,0,0,0,402,400,1,0,0,0,403,405,1,0,0,0,404,402,
        1,0,0,0,405,406,5,42,0,0,406,407,5,47,0,0,407,408,1,0,0,0,408,409,
        6,58,3,0,409,118,1,0,0,0,410,411,5,47,0,0,411,412,5,47,0,0,412,416,
        1,0,0,0,413,415,8,9,0,0,414,413,1,0,0,0,415,418,1,0,0,0,416,414,
        1,0,0,0,416,417,1,0,0,0,417,419,1,0,0,0,418,416,1,0,0,0,419,420,
        6,59,3,0,420,120,1,0,0,0,421,422,9,0,0,0,422,423,6,60,4,0,423,122,
        1,0,0,0,424,430,5,34,0,0,425,426,5,92,0,0,426,429,7,3,0,0,427,429,
        8,10,0,0,428,425,1,0,0,0,428,427,1,0,0,0,429,432,1,0,0,0,430,428,
        1,0,0,0,430,431,1,0,0,0,431,433,1,0,0,0,432,430,1,0,0,0,433,434,
        6,61,5,0,434,124,1,0,0,0,435,439,5,34,0,0,436,438,9,0,0,0,437,436,
        1,0,0,0,438,441,1,0,0,0,439,440,1,0,0,0,439,437,1,0,0,0,440,442,
        1,0,0,0,441,439,1,0,0,0,442,446,3,127,63,0,443,445,9,0,0,0,444,443,
        1,0,0,0,445,448,1,0,0,0,446,447,1,0,0,0,446,444,1,0,0,0,447,449,
        1,0,0,0,448,446,1,0,0,0,449,450,6,62,6,0,450,126,1,0,0,0,451,452,
        7,10,0,0,452,128,1,0,0,0,22,0,244,247,251,254,259,267,272,279,284,
        288,299,312,314,386,392,402,416,428,430,439,446,7,1,19,0,1,22,1,
        1,24,2,6,0,0,1,60,3,1,61,4,1,62,5
    ]

class MT22Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    AUTO = 1
    BREAK = 2
    BOOLEAN = 3
    DO = 4
    FLOAT = 5
    ELSE = 6
    FOR = 7
    FUNCTION = 8
    IF = 9
    INT = 10
    RETURN = 11
    STRING = 12
    WHILE = 13
    VOID = 14
    OUT = 15
    CONTINUE = 16
    OF = 17
    INHERIT = 18
    ARRAY = 19
    FLOATLIT = 20
    INTLIT = 21
    BOOLLIT = 22
    STRINGLIT = 23
    ADDOP = 24
    SUBOP = 25
    MULOP = 26
    DIVOP = 27
    MODOP = 28
    NEGOP = 29
    ANDOP = 30
    OROP = 31
    EQOP = 32
    NEQOP = 33
    LTOP = 34
    LEOP = 35
    GTOP = 36
    GEOP = 37
    STRINGCONCAT = 38
    LB = 39
    RB = 40
    LSB = 41
    RSB = 42
    LCB = 43
    RCB = 44
    DOT = 45
    COMMA = 46
    SM = 47
    COLON = 48
    ASSIGN = 49
    DOUBLEQUOTE = 50
    ID = 51
    WS = 52
    BLOCKCOMMENT = 53
    LINECOMMENT = 54
    ERROR_CHAR = 55
    UNCLOSE_STRING = 56
    ILLEGAL_ESCAPE = 57

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'auto'", "'break'", "'boolean'", "'do'", "'float'", "'else'", 
            "'for'", "'function'", "'if'", "'integer'", "'return'", "'string'", 
            "'while'", "'void'", "'out'", "'continue'", "'of'", "'inherit'", 
            "'array'", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'&&'", 
            "'||'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'::'", 
            "'('", "')'", "'['", "']'", "'{'", "'}'", "'.'", "','", "';'", 
            "':'", "'='", "'\"'" ]

    symbolicNames = [ "<INVALID>",
            "AUTO", "BREAK", "BOOLEAN", "DO", "FLOAT", "ELSE", "FOR", "FUNCTION", 
            "IF", "INT", "RETURN", "STRING", "WHILE", "VOID", "OUT", "CONTINUE", 
            "OF", "INHERIT", "ARRAY", "FLOATLIT", "INTLIT", "BOOLLIT", "STRINGLIT", 
            "ADDOP", "SUBOP", "MULOP", "DIVOP", "MODOP", "NEGOP", "ANDOP", 
            "OROP", "EQOP", "NEQOP", "LTOP", "LEOP", "GTOP", "GEOP", "STRINGCONCAT", 
            "LB", "RB", "LSB", "RSB", "LCB", "RCB", "DOT", "COMMA", "SM", 
            "COLON", "ASSIGN", "DOUBLEQUOTE", "ID", "WS", "BLOCKCOMMENT", 
            "LINECOMMENT", "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    ruleNames = [ "AUTO", "BREAK", "BOOLEAN", "DO", "FLOAT", "ELSE", "FOR", 
                  "FUNCTION", "IF", "INT", "RETURN", "STRING", "WHILE", 
                  "VOID", "OUT", "CONTINUE", "OF", "INHERIT", "ARRAY", "FLOATLIT", 
                  "DECIMAL", "EXPORNENT", "INTLIT", "BOOLLIT", "STRINGLIT", 
                  "ESC_SEQ", "SUB_STRING", "ADDOP", "SUBOP", "MULOP", "DIVOP", 
                  "MODOP", "NEGOP", "ANDOP", "OROP", "EQOP", "NEQOP", "LTOP", 
                  "LEOP", "GTOP", "GEOP", "STRINGCONCAT", "LB", "RB", "LSB", 
                  "RSB", "LCB", "RCB", "DOT", "COMMA", "SM", "COLON", "ASSIGN", 
                  "DOUBLEQUOTE", "DIGIT", "ZERO", "ID", "WS", "BLOCKCOMMENT", 
                  "LINECOMMENT", "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", 
                  "ESCAPE" ]

    grammarFileName = "MT22.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[19] = self.FLOATLIT_action 
            actions[22] = self.INTLIT_action 
            actions[24] = self.STRINGLIT_action 
            actions[60] = self.ERROR_CHAR_action 
            actions[61] = self.UNCLOSE_STRING_action 
            actions[62] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def FLOATLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

                    self.text = self.text.replace('_', '')
                
     

    def INTLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:

                    self.text = self.text.replace('_', '')
                
     

    def STRINGLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

                    self.text = self.text[1:-1]
                
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:

                    self.text = self.text[1:]
                    raise UncloseString(self.text)
                
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:

                    self.text = self.text[1:]
                    raise IllegalEscape(self.text)
                
     


